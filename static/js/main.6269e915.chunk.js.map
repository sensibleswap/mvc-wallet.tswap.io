{"version":3,"sources":["web3/wallet.ts","lib/util.ts","lib/index.ts","state/state.ts","state/action.ts","hooks.js","App.js","reportWebVitals.js","index.js"],"names":["NetWork","div","a","biga","BigNumber","i","toString","multi","multipliedBy","plus","minus","getDecimalString","decimalNum","pow","lessThan","b","lt","lessThanEqual","lte","greaterThan","gt","greaterThanEqual","gte","checkFeeRate","tx","minFeeRate","size","toBuffer","length","feeRate","getFee","msg","message","error","Error","safeJsonStringify","data","JSON","parse","stringify","key","value","getSensibleApiPrefix","network","test","Mainnet","isSensibleSuccess","res","status","sleep","ms","Promise","resolve","setTimeout","formatValue","decimal","util","isValidAddress","address","mvc","Address","_","generateKeysFromEmailPassword","email","pass","Testnet","s","regchars","match","regupchars","regnums","bufferS","Buffer","from","crypto","Hash","sha256","tmp","hex","privateKey","PrivateKey","toAddress","publicKey","toPublicKey","getSensibleFtHistoryUrl","genesis","codehash","getWocAddressUrl","url","getWocTransactionUrl","txid","signAnyTx","options","txHex","scriptHex","inputIndex","satoshis","Transaction","script","Script","fromBuffer","sig","toHex","signTx","toASM","Number","getAddressSensibleFtList","pageSize","page","getAddressSensibleFtListByPage","list","console","log","apiPrefix","axios","get","map","item","codeHash","tokenName","name","tokenSymbol","symbol","tokenDecimal","balance","confirmedString","unconfirmedString","statusText","getAddressBsvUtxoList","txId","outputIndex","outIndex","getAddressBsvBalanceByUtxo","sum","utxoList","total","reduce","prev","cur","broadcastSensibleQeury","rawtx","apiPrefx","post","hash","mapBsvFeeError","err","getCustomSigners","findValue","customSatotxList","find","satotxList","selectNotNullSigners","signerList","signers","transferSensibleFt","senderWif","receivers","utxos","noBroadcast","customSigner","ft","SensibleFT","purse","feeb","transfer","routeCheckTx","txParseRes","parseTransaction","serialize","outputs","errMsg","isBsvAmountExceed","indexOf","isFtUtxoAmountExceed","mergeBsvUtxo","merge","Signature","sighashType","SIGHASH_ALL","SIGHASH_FORKID","unlockP2PKHInput","sigtype","prevTxId","inputs","signature","Sighash","sign","output","satoshisBN","setScript","buildPublicKeyHashIn","toDER","checkBsvReceiversSatisfied","satified","txAddressAmountMap","getKey","amount","forEach","rece","transferBsv","allUtxos","totalOutput","utxoValue","selectedUtxoList","feePerKb","dust","utxoResList","push","addInput","Input","PublicKeyHash","Output","buildPublicKeyHashOut","empty","to","change","clearOutputs","index","type","Sentry","fee","utxolist","input","ftToken","ret","addr","tokenAmount","isFt","ftDetail","tokenAddress","window","defaultSatotx","satotxApiPrefix","satotxPubKey","initialState","account","bsvBalance","sensibleFtList","satotxConfigMap","Map","set","createGlobalState","useGlobalState","getGlobalState","setGlobalState","accountStorageKey","saveAccountStorage","str","localStorage","setItem","getAccountStorage","getItem","pollingBsvTimer","pollingSensibleFtTimer","pollingBsvBalance","clearInterval","fn","setInterval","pollingSensibleFtBalance","valid_sensibleFtList","filter","saveAccount","password","top","hashdata","decodeURIComponent","location","substr","postMsg","createPostMsg","id","preAccount","preBsvBalance","preSensibleFtBalance","accountKey","emit","isBsvBalanceEqual","b1","b2","isSensibleFtBalanceEqual","sort","item1","item2","localeCompare","isAccountEqual","requestLatestData","latestAccount","latestBalance","equal","handleRequest","method","on","eventData","requestId","params","response","PublicKey","signed","useOnceCall","cb","condition","isCalledRef","useRef","useEffect","current","Option","Select","Header","useState","decodeModalVisible","setDecodeModalVisible","setRawtx","setNetwork","resultModalVisible","setResultModalVisible","className","title","content","onClick","actions","open","visible","onCancel","TextArea","rows","onChange","e","target","style","width","placeholder","LoginPanel","Form","useForm","form","bordered","layout","onFinish","Modal","confirm","href","rel","onOk","getFieldsValue","Item","rules","required","prefix","UserOutlined","min","transform","trim","Password","LockOutlined","visibilityToggle","label","htmlType","AccountInfoPanel","onWithDraw","onTransfer","handleTransfer","margin","justify","span","itemLayout","dataSource","renderItem","placement","Meta","description","height","display","alignItems","getRabinPubKeys","getRabins","rabinApis","promises","rabins","rabinApi","all","then","pubKey","TransferAllPanel","initDatas","onTransferCallback","loading","setLoading","values","isBsv","token","setFieldsValue","handleSubmit","receiverLists","broadcastBsv","formatReceiverList","transferRes","broadcastSensibleFt","broadcastBsvAndToken","txs","totalOutputValueFloatDuck","totalOutputValue","wif","txInfo","resItem","routeCheckTxid","routeCheckTxHex","routeCheckOutputs","bsvRawTx","amountCheckTx","amountCheckRawTx","tokenRawTx","cursor","LeftOutlined","formatBalance","canEdit","fontWeight","List","fields","add","remove","fieldKey","restField","marginBottom","align","validator","reject","disabled","shape","icon","MinusOutlined","PlusOutlined","block","TransferPanel","initReceivers","receiverList","success","App","trasfering","setTransfering","trasferSensibleFtGenesis","setTrasferSensibleFtGenesis","setInitReceivers","setInitDatas","initRabins","setRabins","initNoBroadcast","setInitNoBroadcast","handleCancelTransfer","getHashData","opener","handlePopResponseCallback","resObj","requestAccountCondition","transferBsvCondition","outputTotal","datas","v","obu","onbeforeunload","event","overflow","accountName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isIframe","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6269e915.chunk.js","sourcesContent":["\r\nexport enum NetWork {\r\n  Testnet = 'testnet',\r\n  Mainnet = 'mainnet',\r\n  STN = 'STN'\r\n}\r\n\r\n","import BigNumber from \"bignumber.js\";\r\nimport {message} from 'antd'\r\n\r\n// 最大是253，那么全部用 string 吧\r\ntype NumberDuck = number | string\r\n\r\nexport function div (a: NumberDuck, ...others: NumberDuck[]): string {\r\n    let biga = new BigNumber(a)\r\n    for (let i = 0; i < others.length; i++) {\r\n        biga = biga.div(new BigNumber(others[i]))\r\n    }\r\n    return biga.toString()\r\n}\r\n\r\nexport function multi(a: NumberDuck,  ...others: NumberDuck[]): string {\r\n    let biga = new BigNumber(a)\r\n    for (let i = 0; i < others.length; i++) {\r\n        biga = biga.multipliedBy(new BigNumber(others[i]))\r\n    }\r\n    return biga.toString()\r\n}\r\n\r\nexport function plus(a: NumberDuck,  ...others: NumberDuck[]): string {\r\n    let biga = new BigNumber(a)\r\n    for (let i = 0; i < others.length; i++) {\r\n        biga = biga.plus(new BigNumber(others[i]))\r\n    }\r\n    return biga.toString()\r\n}\r\n\r\nexport function minus(a: NumberDuck,  ...others: NumberDuck[]): string {\r\n    let biga = new BigNumber(a)\r\n    for (let i = 0; i < others.length; i++) {\r\n        biga = biga.minus(new BigNumber(others[i]))\r\n    }\r\n    return biga.toString()\r\n}\r\n\r\nexport function getDecimalString(decimalNum: number): string {\r\n    return new BigNumber(10).pow(decimalNum).toString()\r\n}\r\n\r\nexport function lessThan(a: NumberDuck, b: NumberDuck):boolean {\r\n    let biga = new BigNumber(a)\r\n    return biga.lt(new BigNumber(b))\r\n}\r\n\r\nexport function lessThanEqual(a: NumberDuck, b: NumberDuck):boolean {\r\n    let biga = new BigNumber(a)\r\n    return biga.lte(new BigNumber(b))\r\n}\r\n\r\nexport function greaterThan(a: NumberDuck, b: NumberDuck):boolean {\r\n    let biga = new BigNumber(a)\r\n    return biga.gt(new BigNumber(b))\r\n}\r\n\r\nexport function greaterThanEqual(a: NumberDuck, b: NumberDuck):boolean {\r\n    let biga = new BigNumber(a)\r\n    return biga.gte(new BigNumber(b))\r\n}\r\n\r\nexport function equal(a: NumberDuck, b: NumberDuck): boolean {\r\n    let biga = new BigNumber(a)\r\n    return biga.eq(new BigNumber(b))\r\n}\r\n\r\nexport function toString(a: NumberDuck): string {\r\n    return new BigNumber(a).toString()\r\n}\r\n\r\nexport function checkFeeRate(tx: any, minFeeRate?: number) {\r\n    minFeeRate = minFeeRate || 0.5\r\n    const size = tx.toBuffer().length\r\n    const feeRate = tx.getFee() / size;\r\n    if (feeRate < minFeeRate) {\r\n        const msg = `The fee rate should not be less than ${minFeeRate}, but in the end it is ${feeRate}`\r\n        message.error(msg)\r\n        throw new Error(msg)\r\n    }\r\n}\r\n\r\nexport function safeJsonStringify(data: any) {\r\n    return JSON.parse(JSON.stringify(data, (key, value) =>\r\n        typeof value === 'bigint'\r\n            ? value.toString()\r\n            : value // return everything else unchanged\r\n    ));\r\n}\r\n\r\n// 传过来 string/int -> 显示(float) -> bigint\r\n","import { mvc, toHex, signTx } from 'mvc-scrypt';\r\nimport { NetWork } from '../web3';\r\nimport {Key, SensibleFt, SensibleSatotx, TransferReceiver, BsvUtxo} from '../state/stateType'\r\nimport axios from 'axios'\r\nimport {SensibleFT} from 'meta-contract'\r\nimport * as util from './util'\r\nimport * as Sentry from \"@sentry/react\";\r\nimport customSatotxList from './customSatotx.json'\r\n\r\nfunction getSensibleApiPrefix(network: NetWork) {\r\n    const test = network === NetWork.Mainnet ? '' : '-testnet'\r\n    return `https://api-mvc${test}.metasv.com`\r\n}\r\nfunction isSensibleSuccess(res: any) {\r\n    return res.status === 200\r\n}\r\n\r\nfunction sleep(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n}\r\n\r\nexport function formatValue(value: number, decimal: number) {\r\n    // const bigNum = mvc.crypto.BN.fromNumber(value)\r\n    // return bigNum.div(10**decimal).toString(10)\r\n    // return value / (10**decimal)\r\n    return util.div(value, util.getDecimalString(decimal))\r\n}\r\n\r\nexport function isValidAddress(network: NetWork, address: string) {\r\n    try {\r\n        new mvc.Address(address, network)\r\n        return true\r\n    } catch (_) {\r\n        return false\r\n    }\r\n}\r\n\r\nexport function generateKeysFromEmailPassword(email: string, pass: string, network: NetWork = NetWork.Testnet): Key {\r\n    let s: string = email\r\n    s += '|'+pass+'|';\r\n    s += s.length+'|!@'+((pass.length*7)+email.length)*7;\r\n    var regchars = (pass.match(/[a-z]+/g)) ? pass.match(/[a-z]+/g)!.length : 1;\r\n    var regupchars = (pass.match(/[A-Z]+/g)) ? pass.match(/[A-Z]+/g)!.length : 1;\r\n    var regnums = (pass.match(/[0-9]+/g)) ? pass.match(/[0-9]+/g)!.length : 1;\r\n    s += ((regnums+regchars)+regupchars)*pass.length+'3571';\r\n    s += (s+''+s);\r\n\r\n    let bufferS = Buffer.from(s)\r\n    bufferS = mvc.crypto.Hash.sha256(bufferS)\r\n\tfor(let i=0;i<=49;i++){\r\n        const tmp = Buffer.from(bufferS.toString('hex'))\r\n        bufferS = mvc.crypto.Hash.sha256(tmp)\r\n\t}\r\n    const hex = mvc.crypto.Hash.sha256(Buffer.from(bufferS.toString('hex'))).toString('hex')\r\n    \r\n    const privateKey = new mvc.PrivateKey(hex, network)\r\n    const address = privateKey.toAddress(network).toString()\r\n    \r\n    return {\r\n        address,\r\n        privateKey: privateKey.toString(),\r\n        publicKey: privateKey.toPublicKey().toString()\r\n    }\r\n}\r\n\r\nexport function getSensibleFtHistoryUrl(network: NetWork, address: string, genesis: string, codehash: string) {\r\n    // https://sensiblequery.com/#/ft/utxo/a1961d0c0ab39f1bd0f79c2f6ae27138cca0620c/d4266deb03b5fdb7c9af39fa71f86f4b1f6390422e9bcd1556399a3f0063965f00000000/1111111111111111111114oLvT2\r\n    const test = network === NetWork.Mainnet ? '' : '/test'\r\n    return `https://sensiblequery.com${test}/#/ft/utxo/${codehash}/${genesis}/${address}`\r\n}\r\n\r\n\r\nexport function getWocAddressUrl(network: NetWork, address: string) {\r\n    let url = ''\r\n    if (network === NetWork.Mainnet) {\r\n        url = 'https://scan.mvc.space/address/'\r\n    } \r\n    if (network === NetWork.Testnet) {\r\n        url = 'https://scan.mvc.space/address/'\r\n    }\r\n    if (!url) {\r\n        return url\r\n    }\r\n    url += address\r\n    return url\r\n}\r\n\r\nexport function getWocTransactionUrl(network: NetWork, txid: string) {\r\n    let url = ''\r\n    if (network === NetWork.Mainnet) {\r\n        url = 'https://scan.mvc.space/tx/'\r\n    } \r\n    if (network === NetWork.Testnet) {\r\n        url = 'https://scan.mvc.space/tx/'\r\n    }\r\n    if (!url) {\r\n        return url\r\n    }\r\n    url += txid\r\n    return url\r\n}\r\n\r\nexport async function signAnyTx(options: any) {\r\n    const {txHex, scriptHex, inputIndex, privateKey, publicKey, satoshis} = options\r\n    const tx = new mvc.Transaction(txHex)\r\n    const script = mvc.Script.fromBuffer(Buffer.from(scriptHex, 'hex'))\r\n    const sig = toHex(signTx(tx, privateKey , script.toASM(), Number(satoshis), inputIndex))\r\n    \r\n    return {\r\n        publicKey: publicKey.toString(),\r\n        sig,\r\n    }\r\n}\r\n\r\n// todo 分页获取\r\nexport async function getAddressSensibleFtList(network: NetWork, address: string): Promise<SensibleFt[]> {\r\n    // todo remove next line\r\n    let res: SensibleFt[] = []\r\n    const pageSize = 20\r\n    try {\r\n        for (let page = 1; ; page++) {\r\n            const list = await getAddressSensibleFtListByPage(network, address, page, pageSize)\r\n            res = [...res, ...list]\r\n            if (list.length < pageSize) {\r\n                break\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.log('getAddressSensibleFtList error')\r\n        console.error(err)\r\n    }\r\n    return res;\r\n}\r\n\r\nexport async function getAddressSensibleFtListByPage(network: NetWork, address: string, page: number, pageSize: number = 20): Promise<SensibleFt[]> {\r\n    const apiPrefix = getSensibleApiPrefix(network)\r\n\r\n    const res = await axios.get(`${apiPrefix}/contract/ft/address/${address}/balance`)\r\n    const success = isSensibleSuccess(res)\r\n\r\n    if (success) {\r\n        return (res.data || []).map((item: any) => {\r\n            return {\r\n                genesis: item.genesis,\r\n                codehash: item.codeHash,\r\n                tokenName: item.name,\r\n                tokenSymbol: item.symbol,\r\n                tokenDecimal: item.decimal,\r\n                balance: util.plus(item.confirmedString, item.unconfirmedString),\r\n            }\r\n        })\r\n    }\r\n    throw new Error(res.statusText)\r\n}\r\n\r\n// 获取 mvc utxo\r\nexport async function getAddressBsvUtxoList(network: NetWork, address: string, page: number, pageSize: number=16): Promise<BsvUtxo[]> {\r\n    const cursor = (page - 1) * pageSize\r\n    const apiPrefix = getSensibleApiPrefix(network)\r\n    const res = await axios.get(`${apiPrefix}/address/${address}/utxo`)\r\n    const success = isSensibleSuccess(res)\r\n    if (success) {\r\n        return (res.data || []).map((item: any) => {\r\n            return {\r\n                txId: item.txid, \r\n                outputIndex: item.outIndex,\r\n                satoshis: item.value,\r\n                address: address,\r\n            }\r\n        })\r\n    }\r\n\r\n    // const fakeUtxoList: BsvUtxo[] = [\r\n    //     {\r\n    //         txId: '6a18f5b859fb4c281affaf8f6245a2fe0813867d4b7d24948da18e099462619b',\r\n    //         outputIndex: 0,\r\n    //         satoshis: 98775,\r\n    //         address,\r\n    //     },\r\n    //     {\r\n    //         txId: 'de980facfe7b10a84bfa658130b2b7725565510f967534459d63e6c9717a08e2',\r\n    //         outputIndex: 0,\r\n    //         satoshis: 98679,\r\n    //         address,\r\n    //     },\r\n    //     {\r\n    //         txId: '8ace8ab3995de63af867d929561b3a48bb499ea8d6e64c2ecefba29c6213764f',\r\n    //         outputIndex: 4,\r\n    //         satoshis: 4939535,\r\n    //         address,\r\n    //     },\r\n    //     {\r\n    //         txId: '74bec534becb77f894bcacaf2386604642a1ea00e371838b1780f5235a12bb9d',\r\n    //         outputIndex: 2,\r\n    //         satoshis: 45033315,\r\n    //         address,\r\n    //     }\r\n    // ]\r\n    // if (page === 1) {\r\n    //     return fakeUtxoList\r\n    // }\r\n    // return []\r\n    \r\n    throw new Error(res.statusText)\r\n}\r\n\r\n// 获取bsv 余额, 这里加入了ft utxo的值，暂时不能用\r\nexport async function getAddressBsvBalance(network: NetWork, address: string): Promise<number | string> {\r\n    const apiPrefix = getSensibleApiPrefix(network)\r\n    const res = await axios.get(`${apiPrefix}/address/${address}/balance`)\r\n    const success = isSensibleSuccess(res)\r\n    if (success) {\r\n        return util.plus(res.data.confirmed, res.data.unconfirmed)\r\n    }\r\n    throw new Error(res.statusText)\r\n}\r\n\r\nexport async function getAddressBsvBalanceByUtxo(network: NetWork, address: string): Promise<string> {\r\n    let page = 1\r\n    const pageSize = 16\r\n    let sum: string = '0'\r\n    for (;;) {\r\n        const utxoList = await getAddressBsvUtxoList(network, address, page, pageSize)\r\n        const total = utxoList.reduce((prev: any, cur: any) => util.plus(prev, cur.satoshis), '0')\r\n        sum = util.plus(sum, total)\r\n        if (utxoList.length < pageSize) {\r\n            break\r\n        }\r\n        page++\r\n    }\r\n    console.log('balance', sum)\r\n    return sum\r\n}\r\n\r\n// 获取 sensible ft 余额\r\nexport async function getAddressSensibleFtBalance(network: NetWork, address: string, codehash: string, genesis: string): Promise<number> {\r\n    const apiPrefix = getSensibleApiPrefix(network)\r\n    const res = await axios.get(`${apiPrefix}/contract/ft/address/${address}/balance?codeHash=${codehash}&&genesis=${genesis}`)\r\n    const success = isSensibleSuccess(res)\r\n    if (success) {\r\n        return Number(util.plus(res.data[0].confirmedString, res.data[0].unconfirmedString))\r\n    }\r\n    throw new Error(res.statusText)\r\n}\r\n\r\n// 获取 sensible 余额 地址\r\nexport async function getSensibleAddressUrl(network: NetWork, address: string, codehash: string, genesis: string) {\r\n    const test = network === NetWork.Mainnet ? '' : '/test'\r\n    // https://sensiblequery.com/#/ft/utxo/ac939f3cf7aba022d09f05e5448f1e635c81dbb3/598d220eaecb68cf783cbc6cc6295d042897874f/1FJCX1QG7KyaHpx1U2iVe4xoAWNVB1Wd3L\r\n    return `https://sensiblequery.com${test}/#/ft/utxo/${codehash}/${genesis}/${address}`\r\n}\r\n\r\n\r\n// 广播交易\r\nexport async function broadcastSensibleQeury(network: NetWork, rawtx: string) {\r\n    const apiPrefx = getSensibleApiPrefix(network)\r\n    console.log('sensible 交易广播', network, rawtx)\r\n    const res = await axios.post(`${apiPrefx}/tx/broadcast`, {\r\n        hex: rawtx,\r\n    })\r\n    const success = isSensibleSuccess(res)\r\n    if (success) {\r\n        return new mvc.Transaction(rawtx).hash\r\n    }\r\n    throw new Error('broadcast failed')\r\n}\r\n\r\n\r\n// 发送 token 交易\r\nconst mapBsvFeeError = (err: Error) => {\r\n    if (err.message === \"Insufficient balance.\") {\r\n        // 将模糊的错误信息转换\r\n        return new Error('Low mvc balance to pay miners')\r\n    }\r\n    return err\r\n}\r\nconst getCustomSigners = (codehash: string, genesis: string):SensibleSatotx[] => {\r\n    const findValue = customSatotxList.find(item => item.codehash === codehash && item.genesis === genesis)\r\n    if (findValue) {\r\n        return findValue.satotxList\r\n    }\r\n    return []\r\n}\r\nconst selectNotNullSigners = (...signerList: SensibleSatotx[][]): SensibleSatotx[] =>  {\r\n    for (let signers of signerList) {\r\n        if (signers && signers.length > 0) {\r\n            return signers\r\n        }\r\n    }\r\n    return []\r\n}\r\nexport async function transferSensibleFt(network: NetWork, signers: SensibleSatotx[], senderWif: string, receivers: TransferReceiver[], codehash: string, genesis: string, utxos: any = false, noBroadcast: boolean = false){\r\n    \r\n    const customSigner = getCustomSigners(codehash, genesis)\r\n    signers = selectNotNullSigners(signers, customSigner)\r\n\r\n    console.log('signers', signers)\r\n    \r\n    const ft = new SensibleFT({\r\n        network: network as any,\r\n        purse: senderWif,\r\n        feeb: 1.0,\r\n    })\r\n    console.log('transferSensibleFt', receivers, network, codehash, genesis, signers)\r\n\r\n    try {\r\n        const {txid, tx, routeCheckTx} = await ft.transfer({\r\n            senderWif: senderWif,\r\n            receivers,\r\n            codehash,\r\n            genesis,\r\n            utxos: utxos,\r\n            noBroadcast,\r\n        })\r\n        if (noBroadcast === true) {\r\n            return {tx, routeCheckTx}\r\n        }\r\n        util.checkFeeRate(tx)\r\n        const txParseRes = parseTransaction(network, tx.serialize(true))\r\n        return {\r\n            txid,\r\n            outputs: txParseRes.outputs,\r\n        }\r\n    } catch (_err: any) {\r\n        const err = mapBsvFeeError(_err)\r\n        const errMsg = err.toString();\r\n        const isBsvAmountExceed =\r\n          errMsg.indexOf(\r\n            \"Mvc utxos should be no more than 3 in \"\r\n          ) > 0;\r\n        let isFtUtxoAmountExceed = errMsg.indexOf('Too many token-utxos') > 0;\r\n        console.log(\"broadcast sensible ft error\");\r\n        console.error(err);\r\n\r\n        if (!isBsvAmountExceed && !isFtUtxoAmountExceed) {\r\n            throw err;\r\n        }\r\n\r\n        // 如果 mvc utxo 先 merge mvc utxo\r\n        if (isBsvAmountExceed) {\r\n            try {\r\n                await mergeBsvUtxo(network, senderWif)\r\n                await sleep(3000)\r\n            } catch (err) {\r\n                console.log('merge mvc utxo fail')\r\n                console.error(err)\r\n                throw err\r\n            }\r\n\r\n            // merge 后重新发起 ft transfer 交易\r\n            try {\r\n                const {txid, tx} = await ft.transfer({\r\n                    senderWif: senderWif,\r\n                    receivers,\r\n                    codehash,\r\n                    genesis,\r\n                })\r\n                util.checkFeeRate(tx)\r\n                const txParseRes = parseTransaction(network, tx.serialize(true))\r\n                return {\r\n                    txid,\r\n                    outputs: txParseRes.outputs,\r\n                }\r\n            } catch (_err: any) {\r\n                const err = mapBsvFeeError(_err)\r\n                console.log('ft transfer fail after mvc utxo merge')\r\n                console.error(err)\r\n                const errMsg = err.toString()\r\n                isFtUtxoAmountExceed = errMsg.indexOf('Too many token-utxos') > 0;\r\n                if (!isFtUtxoAmountExceed) {\r\n                    throw err\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isFtUtxoAmountExceed) {\r\n            // merge utxo\r\n            try {\r\n                await ft.merge()\r\n                //util.checkFeeRate(tx)\r\n                await sleep(3000)\r\n            } catch (err) {\r\n                console.log('merge ft utxo fail')\r\n                console.error(err)\r\n                throw err\r\n            }\r\n\r\n            // merge 后重新发起 ft transfer 交易\r\n            try {\r\n                const {txid, tx} = await ft.transfer({\r\n                    senderWif: senderWif,\r\n                    receivers,\r\n                    codehash,\r\n                    genesis,\r\n                })\r\n                util.checkFeeRate(tx)\r\n                const txParseRes = parseTransaction(network, tx.serialize(true))\r\n                return {\r\n                    txid,\r\n                    outputs: txParseRes.outputs,\r\n                }\r\n            } catch (_err: any) {\r\n                const err = mapBsvFeeError(_err)\r\n                console.log('ft transfer fail after ft utxo merge')\r\n                console.error(err)\r\n                throw err\r\n            }\r\n        }\r\n    } \r\n}\r\n\r\nconst Signature = mvc.crypto.Signature;\r\nexport const sighashType = Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;\r\n\r\n\r\n// p2pkh 解锁\r\nexport function unlockP2PKHInput(privateKey: mvc.PrivateKey, tx: mvc.Transaction, inputIndex: number, sigtype: number) {\r\n    const sig = new mvc.Transaction.Signature({\r\n      publicKey: privateKey.publicKey,\r\n      prevTxId: tx.inputs[inputIndex].prevTxId,\r\n      outputIndex: tx.inputs[inputIndex].outputIndex,\r\n      inputIndex,\r\n      signature: mvc.Transaction.Sighash.sign(\r\n        tx,\r\n        privateKey,\r\n        sigtype,\r\n        inputIndex,\r\n        tx.inputs[inputIndex].output.script,\r\n        tx.inputs[inputIndex].output.satoshisBN\r\n      ),\r\n      sigtype,\r\n    });\r\n  \r\n    tx.inputs[inputIndex].setScript(\r\n      mvc.Script.buildPublicKeyHashIn(\r\n        sig.publicKey,\r\n        sig.signature.toDER(),\r\n        sig.sigtype\r\n      )\r\n    );\r\n}\r\n\r\n// 发送 mvc 交易\r\nfunction checkBsvReceiversSatisfied(receivers: TransferReceiver[], tx: any, network: NetWork) {\r\n    let satified = true\r\n    const txAddressAmountMap: {[key: string]: number} = {}\r\n    const getKey = (address: string, amount: any) => {\r\n        return `${address}_${util.toString(amount)}`\r\n    }\r\n    tx.outputs.forEach((output: any) => {\r\n        const address = output.script.toAddress(network);\r\n        const amount = output.satoshis\r\n        const key = getKey(address, amount)\r\n        txAddressAmountMap[key] = (txAddressAmountMap[key] || 0) + 1\r\n    })\r\n    for (let i = 0; i < receivers.length; i++) {\r\n        const rece = receivers[i]\r\n        const key = getKey(rece.address, rece.amount)\r\n        if (!txAddressAmountMap[key]) {\r\n            satified = false\r\n            break\r\n        }\r\n        txAddressAmountMap[key] = txAddressAmountMap[key] - 1\r\n    }\r\n    return satified\r\n}\r\nexport async function transferBsv(network: NetWork, senderWif: string, receivers: TransferReceiver[], noBroadcast: boolean=false, allUtxos: boolean=false) {\r\n    // 1. 获取用户 utxo 列表\r\n    // 2. 判断 utxo 金额 是否 满足 receivers 金额\r\n    // 3. 构造交易\r\n    // 4. 广播交易\r\n    console.log('arguments', network, senderWif, receivers)\r\n    const address = new mvc.PrivateKey(senderWif, network).toAddress(network)\r\n    const balance = await getAddressBsvBalanceByUtxo(network, address)\r\n    const totalOutput = receivers.reduce((prev: any, cur) => util.plus(prev, cur.amount), '0')\r\n    if (util.lessThan(balance, totalOutput)) {\r\n        throw new Error('Insufficient_bsv_Balance')\r\n    }\r\n    let utxoValue: string = '0'\r\n    let selectedUtxoList = []\r\n\r\n    const tx = new mvc.Transaction()\r\n    tx.feePerKb(500)\r\n    const dust = 456\r\n\r\n    // input = output + fee + change\r\n    // 异常情况: 加上 change 后, fee 增加, 原本 input 不够了, 此时将所有输出移除, 然后，暂不考虑\r\n    \r\n    const pageSize = 16\r\n    for (let page = 1; ;page++) {\r\n        const utxoResList = await getAddressBsvUtxoList(network, address, page, pageSize)\r\n        for (let i = 0; i < utxoResList.length; i++) {\r\n            const item = utxoResList[i]\r\n            utxoValue = util.plus(utxoValue, item.satoshis)\r\n            selectedUtxoList.push(item)\r\n            tx.addInput(\r\n                new mvc.Transaction.Input.PublicKeyHash({\r\n                    output: new mvc.Transaction.Output({\r\n                        script: mvc.Script.buildPublicKeyHashOut(item.address),\r\n                        satoshis: item.satoshis,\r\n                    }),\r\n                    prevTxId: item.txId,\r\n                    outputIndex: item.outputIndex,\r\n                    script: mvc.Script.empty(),\r\n                })\r\n            );\r\n            if (!allUtxos && util.lessThanEqual(util.plus(totalOutput, dust), utxoValue)) {\r\n                break\r\n            }\r\n        }\r\n        if (!allUtxos && util.lessThanEqual(util.plus(totalOutput, dust), utxoValue)) {\r\n            break\r\n        }\r\n        if (utxoResList.length <= pageSize) {\r\n            break\r\n        }\r\n    }\r\n    receivers.forEach(item => {\r\n        tx.to(item.address, +item.amount)\r\n    })\r\n    if (util.greaterThan(util.minus(utxoValue, +totalOutput), 0)) {\r\n        tx.change(address)\r\n    }\r\n    // 如果 (utxo输入 - fee - 所有输出) = 找零 < dust，那么全部转出\r\n    if (util.lessThan(util.minus(utxoValue, tx.getFee(), totalOutput), dust)) {\r\n        // 全部转出\r\n        tx.clearOutputs()\r\n        receivers.forEach((item, index) => {\r\n            \r\n            if (receivers.length === index + 1) {\r\n                // 最后一个使用 change\r\n                tx.change(item.address)\r\n            } else {\r\n                tx.to(item.address, +item.amount)\r\n            }\r\n        })\r\n    }\r\n    tx.inputs.forEach((_: any, inputIndex: number) => {\r\n        const privateKey = new mvc.PrivateKey(senderWif)\r\n        unlockP2PKHInput(privateKey, tx, inputIndex, sighashType);\r\n    });\r\n    util.checkFeeRate(tx)\r\n    if (noBroadcast === true) {\r\n        return tx\r\n    }\r\n    const txid = await broadcastSensibleQeury(network, tx.serialize())\r\n    const txParseRes = parseTransaction(network, tx.serialize(true))\r\n\r\n    const amountSatified = checkBsvReceiversSatisfied(receivers, tx, network)\r\n    if (!amountSatified) {\r\n        console.log(util.safeJsonStringify({\r\n            type: 'bsvTransferAmountNotSatified',\r\n            txid: tx.hash,\r\n            receivers,\r\n            outputs: txParseRes.outputs,\r\n        }))\r\n        Sentry.captureMessage(`bsvTransferAmountNotSatified_${address}_${tx.hash}`);\r\n    }\r\n    return {\r\n        txid,\r\n        outputs: txParseRes.outputs,\r\n        fee: tx.getFee()\r\n    }\r\n}\r\n\r\n// 合并 mvc utxo, 合并一页\r\nexport async function mergeBsvUtxo(network: NetWork, senderWif: string) {\r\n    const address = new mvc.PrivateKey(senderWif, network).toAddress(network)\r\n    const utxolist = await getAddressBsvUtxoList(network, address, 1)\r\n    const tx = new mvc.Transaction()\r\n    tx.feePerKb(500)\r\n    utxolist.forEach(item => {\r\n        tx.addInput(new mvc.Transaction.Input.PublicKeyHash({\r\n            output: new mvc.Transaction.Output({\r\n                script: mvc.Script.buildPublicKeyHashOut(item.address),\r\n                satoshis: item.satoshis,\r\n            }),\r\n            prevTxId: item.txId,\r\n            outputIndex: item.outputIndex,\r\n            script: mvc.Script.empty(),\r\n        }))\r\n    })\r\n    tx.change(address)\r\n    tx.inputs.forEach((_: any, inputIndex: number) => {\r\n        const privateKey = new mvc.PrivateKey(senderWif)\r\n        unlockP2PKHInput(privateKey, tx, inputIndex, sighashType)\r\n    })\r\n    util.checkFeeRate(tx)\r\n    const txid = await broadcastSensibleQeury(network, tx.serialize())\r\n    const txParseRes = parseTransaction(network, tx.serialize(true))\r\n    return {\r\n        txid,\r\n        outputs: txParseRes.outputs,\r\n    }\r\n}\r\n\r\n\r\nconst parseTokenContractScript = function (scriptBuf: any, network: any = \"mainnet\") {\r\n    \r\n    //TODO: const parsed = SensibleFT.parseTokenScript(scriptBuf, network)\r\n    \r\n    return \r\n};\r\n\r\n\r\n\r\nexport function parseTransaction(network: NetWork, rawtx: string) {\r\n    let tx\r\n    try {\r\n        tx = new mvc.Transaction(rawtx)\r\n    } catch (err: any) {\r\n        return {\r\n            error: err.message\r\n        }\r\n    }\r\n\r\n    const inputs = tx.inputs.map((input: any, index: number) => {\r\n        const ftToken: any = parseTokenContractScript(input.script.toBuffer(), network);\r\n\r\n        let ret: any = {\r\n            index: index,\r\n            prevTxId: input.prevTxId.toString('hex'),\r\n            outputIndex: input.outputIndex,\r\n            script: input.script.toString('hex'),\r\n        }\r\n        try {\r\n            const addr = input.script.toAddress(network);\r\n            if (addr) {\r\n                ret.address = addr.toString()\r\n            }\r\n        } catch (err) {}\r\n        if (!ftToken) {\r\n            return ret\r\n        }\r\n        if (ftToken.tokenAmount <= 0) {\r\n            return ret\r\n        }\r\n        ret = {\r\n            ...ret,\r\n            isFt: true,\r\n            ftDetail: {\r\n                genesis: ftToken.genesis,\r\n                codehash: ftToken.codehash,\r\n                address: ftToken.tokenAddress,\r\n                decimal: ftToken.decimalNum,\r\n                name: ftToken.tokenName,\r\n                symbol: ftToken.tokenSymbol,\r\n            }\r\n        }\r\n        return ret\r\n    })\r\n    const outputs = tx.outputs.map((output: any, index: number) => {\r\n        const ftToken: any = parseTokenContractScript(output.script.toBuffer(), network);\r\n        let ret: any = {\r\n            index: index,\r\n            satoshis: output.satoshis,\r\n            script: output.script.toString('hex')\r\n        }\r\n        try {\r\n            const addr = output.script.toAddress(network);\r\n            if (addr) {\r\n                ret.address = addr.toString()\r\n            }\r\n        } catch (err) {}\r\n        if (!ftToken) {\r\n            return ret\r\n        }\r\n        if (ftToken.tokenAmount <= 0) {\r\n            return ret\r\n        }\r\n        ret = {\r\n            ...ret,\r\n            isFt: true,\r\n            ftDetail: {\r\n                genesis: ftToken.genesis,\r\n                codehash: ftToken.codehash,\r\n                address: ftToken.tokenAddress,\r\n                decimal: ftToken.decimalNum,\r\n                name: ftToken.tokenName,\r\n                symbol: ftToken.tokenSymbol,\r\n                amount: ftToken.tokenAmount,\r\n            }\r\n        }\r\n        return ret\r\n    })\r\n\r\n    return {\r\n        inputs: inputs,\r\n        outputs: outputs,\r\n        txid: tx.hash,\r\n    }\r\n    \r\n}\r\n\r\n\r\n(window as any).transferBsv = transferBsv;\r\n(window as any).signAnyTx = signAnyTx;","import { createGlobalState } from \"react-hooks-global-state\";\r\nimport {State, SensibleSatotx} from './stateType'\r\n\r\nconst defaultSatotx: SensibleSatotx = {\r\n    satotxApiPrefix: 'https://api.satotx.com', \r\n    satotxPubKey: '25108ec89eb96b99314619eb5b124f11f00307a833cda48f5ab1865a04d4cfa567095ea4dd47cdf5c7568cd8efa77805197a67943fe965b0a558216011c374aa06a7527b20b0ce9471e399fa752e8c8b72a12527768a9fc7092f1a7057c1a1514b59df4d154df0d5994ff3b386a04d819474efbd99fb10681db58b1bd857f6d5'\r\n}\r\n\r\n// app state\r\nconst initialState: State = {\r\n    account: null,\r\n    key: null,\r\n    bsvBalance: null,\r\n    sensibleFtList: [],\r\n    satotxConfigMap: new Map()\r\n};\r\ninitialState.satotxConfigMap.set(\r\n    '5b3bfa8e7600d701e70551075573ea28fd16c25a39fe2bdafdc3e08b11ca76b800000000', \r\n    [defaultSatotx, defaultSatotx, defaultSatotx]\r\n)\r\nconst { useGlobalState, getGlobalState, setGlobalState } = createGlobalState(initialState);\r\n\r\nexport {\r\n    useGlobalState,\r\n    getGlobalState,\r\n    setGlobalState,\r\n    defaultSatotx,\r\n}\r\n","import {setGlobalState, getGlobalState } from './state'\r\nimport {generateKeysFromEmailPassword, getAddressSensibleFtList, getAddressBsvBalanceByUtxo, signAnyTx} from '../lib'\r\nimport {Account, BalanceBsv, Key, SensibleFt} from './stateType'\r\nimport * as createPostMsg from 'post-msg';\r\nimport { SensibleFT } from 'meta-contract';\r\nimport { signTx, mvc, toHex } from 'mvc-scrypt';\r\n\r\n// local account storage\r\nconst accountStorageKey = 'accountStorageKey'\r\n// localStorage.removeItem(accountStorageKey)\r\nfunction saveAccountStorage(account: Account | null) {\r\n    const str = account ? JSON.stringify(account) : ''\r\n    localStorage.setItem(accountStorageKey, str)\r\n    // do not save account !!!\r\n}\r\nfunction getAccountStorage(): Account | null {\r\n    const str = localStorage.getItem(accountStorageKey)\r\n    if (!str) {\r\n        return null\r\n    }\r\n    return JSON.parse(str)\r\n}\r\n\r\nfunction isSupportToken(codehash: string) {\r\n    //return SensibleFT.isSupportedToken(codehash)\r\n    return true\r\n}\r\n\r\n// app action\r\nlet pollingBsvTimer = 0\r\nlet pollingSensibleFtTimer = 0\r\nexport async function pollingBsvBalance(){\r\n    clearInterval(pollingBsvTimer)\r\n    const fn = async () => {\r\n        const account = getGlobalState('account')\r\n        const key = getGlobalState('key')\r\n        if (!account || !key) {\r\n            return\r\n        }\r\n        try {\r\n            const balance = await getAddressBsvBalanceByUtxo(account.network, key.address)\r\n            setGlobalState('bsvBalance', {balance})\r\n        } catch (err) {\r\n            console.log('getAddressBsvBalance err', account.network, key.address, err)\r\n        }\r\n    }\r\n    await fn()\r\n    pollingBsvTimer = window.setInterval(fn, 5000)\r\n}\r\nexport async function pollingSensibleFtBalance() {\r\n    clearInterval(pollingSensibleFtTimer)\r\n    const fn = async () => {\r\n        const account = getGlobalState('account')\r\n        const key = getGlobalState('key')\r\n        if (!account || !key) {\r\n            return\r\n        }\r\n        try {\r\n            const sensibleFtList = await getAddressSensibleFtList(account.network, key.address)\r\n            const valid_sensibleFtList = sensibleFtList.filter(item => isSupportToken(item.codehash));\r\n            setGlobalState('sensibleFtList', valid_sensibleFtList);\r\n        } catch (err) {\r\n            console.log('getAddressSensibleFtList err', account.network, key.address, err)\r\n        }\r\n    }\r\n    await fn()\r\n    pollingSensibleFtTimer = window.setInterval(fn, 5000)\r\n}\r\n\r\nexport async function saveAccount(account: Account | null) {\r\n    saveAccountStorage(account)\r\n    if (account) {\r\n        const key = generateKeysFromEmailPassword(account.email, account.password, account.network)\r\n        setGlobalState('account', account)\r\n        setGlobalState('key', key)\r\n        await pollingSensibleFtBalance()\r\n        pollingBsvBalance()\r\n    } else {\r\n        setGlobalState(\"account\", null)\r\n        setGlobalState('key', null)\r\n    }\r\n}\r\n\r\nexport function recoverAccountFromStorage() {\r\n    const account = getAccountStorage()\r\n    saveAccount(account)\r\n}\r\n\r\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\r\n\r\n// iframe action\r\nexport async function runIframeTask() {\r\n    if (window === window.top) {\r\n        return\r\n    }\r\n    const hashdata = JSON.parse(decodeURIComponent(window.location.hash.substr(1)))\r\n    const postMsg = createPostMsg(window.top, '*')\r\n    const id = hashdata.id\r\n\r\n    let preAccount: Account | null = null\r\n    let preBsvBalance: BalanceBsv | null = null\r\n    let preSensibleFtBalance: SensibleFt[] = []\r\n    let accountKey: Key | null = null\r\n    // let lastBsvBalance: \r\n\r\n    postMsg.emit(id, {\r\n        type: 'ready'\r\n    })\r\n\r\n    const isBsvBalanceEqual = (b1: BalanceBsv | null, b2: BalanceBsv | null) => {\r\n        if (!b1 && !b2) {\r\n            return true\r\n        }\r\n        return b1?.balance === b2?.balance\r\n    }\r\n    const isSensibleFtBalanceEqual = (b1: SensibleFt[], b2: SensibleFt[]) => {\r\n        if (b1.length !== b2.length) {\r\n            return false\r\n        }\r\n        b1.sort((item1, item2) => item1.genesis.localeCompare(item2.genesis))\r\n        b2.sort((item1, item2) => item1.genesis.localeCompare(item2.genesis))\r\n\r\n        for (let i = 0; i < b1.length; i++) {\r\n            const item1 = b1[i]\r\n            const item2 = b2[i]\r\n            if (item1.genesis !== item2.genesis) {\r\n                return false\r\n            }\r\n            if (item1.balance !== item2.balance) {\r\n                return false\r\n            }\r\n        }                \r\n        return true\r\n    }\r\n    const isAccountEqual = (b1: Account | null, b2: Account | null) => {\r\n        return (\r\n            b1?.email === b2?.email &&\r\n            b1?.network === b2?.network &&\r\n            b1?.password === b2?.password\r\n        )\r\n    }\r\n    const requestLatestData = async () => {\r\n        const latestAccount = getAccountStorage()\r\n        if (!(isAccountEqual(latestAccount, preAccount))) {\r\n            postMsg.emit(id, {\r\n                type: 'account',\r\n                data: latestAccount\r\n            })\r\n        }\r\n        preAccount = latestAccount;\r\n        if (preAccount) {\r\n            // get balance\r\n            accountKey = generateKeysFromEmailPassword(preAccount.email, preAccount.password, preAccount.network)\r\n            try {\r\n                const latestBalance = await getAddressBsvBalanceByUtxo(preAccount.network, accountKey.address)\r\n                const equal = isBsvBalanceEqual(preBsvBalance, {balance: latestBalance})\r\n                preBsvBalance = {balance: latestBalance}\r\n                if (!equal) {\r\n                    postMsg.emit(id, {\r\n                        type: 'bsvBalance', \r\n                        data: preBsvBalance,\r\n                    })\r\n                }\r\n            } catch (err) {}\r\n            try {\r\n                const latestBalance = await getAddressSensibleFtList(preAccount.network, accountKey.address)\r\n                const equal = isSensibleFtBalanceEqual(preSensibleFtBalance, latestBalance)\r\n                preSensibleFtBalance = latestBalance\r\n                if (!equal) {\r\n                    postMsg.emit(id, {\r\n                        type: 'sensibleFtBalance',\r\n                        data: preSensibleFtBalance\r\n                    })\r\n                }\r\n            } catch (err) {}\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    const handleRequest = (method: string, fn: Function) => {\r\n        postMsg.on(id, async function (_: any, eventData: any) {\r\n            const {type, data} = eventData\r\n            if (type === 'request' && data?.method === method) {\r\n                const requestId = data.requestId\r\n                try {\r\n                    const res = await fn(data.params)\r\n                    postMsg.emit(id, {\r\n                        type: 'response',\r\n                        data: {\r\n                            requestId,\r\n                            method,\r\n                            response: res,\r\n                        }\r\n                    })\r\n                } catch (err: any) {\r\n                    postMsg.emit(id, {\r\n                        type: 'response',\r\n                        data: {\r\n                            requestId,\r\n                            method,\r\n                            error: err.toString()\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    handleRequest('getAccount', async () => {\r\n        await requestLatestData()\r\n        if (!preAccount) {\r\n            return null\r\n        }\r\n        return {\r\n            name: preAccount.email,\r\n            email: preAccount.email,\r\n            network: preAccount.network,\r\n        }\r\n    });\r\n    handleRequest('getBsvBalance', async () => {\r\n        await requestLatestData()\r\n        return preBsvBalance\r\n    })\r\n    handleRequest('getSensibleFtBalance', async () => {\r\n        await requestLatestData()\r\n        return preSensibleFtBalance\r\n    })\r\n    handleRequest('getAddress', async () => {\r\n        await requestLatestData()\r\n        if (!accountKey) {\r\n            return null\r\n        }\r\n        return accountKey.address\r\n    })\r\n    handleRequest('signTx', async (options: any) => {\r\n        // 参数 (address + sighash)\r\n        // sighash: tx, sigtype, inputIndex, input.output.script, input.output,satoshisBN\r\n\r\n        // mvc-scrypt: signTx(tx, privateKey, lockingScriptASM: string, inputAmount: number, inputIndex: number, sighashType = DEFAULT_SIGHASH_TYPE, flags=DEFAULT_FLAGS): Signature.toTxFormat()\r\n\r\n        // mvc: mvc.Transaction.sighash.sign(tx: Transaction, privateKey: PrivateKey, sighashType: number, inputIndex: string, subscript: Script, satoshisBN: BN): Signature\r\n\r\n        // sCrypt params: tx(Transaciton object), inputIndex(number), sigHashType(SigType), onlySig?(boolean) 成功返回 unlockingScript 或者 Signature string\r\n\r\n        // options: {txHex, scriptHex, inputIndex, privateKey, publicKey, address, satoshis}\r\n\r\n        const {address} = options\r\n        if (!accountKey) {\r\n            throw new Error('not_login')\r\n        }\r\n        if (address !== accountKey.address) {\r\n            throw new Error('not_my_address')\r\n        }\r\n        return signAnyTx({\r\n            ...options,\r\n            privateKey: new mvc.PrivateKey(accountKey.privateKey, preAccount?.network ),\r\n            publicKey: new mvc.PublicKey(accountKey.publicKey, preAccount?.network)\r\n        })\r\n    })\r\n    handleRequest('logout', async () => {\r\n        saveAccountStorage(null)\r\n    })\r\n    handleRequest('ping', () => {\r\n        return null;\r\n    })\r\n\r\n    for (;;) {\r\n        const signed = await requestLatestData()\r\n        await sleep(signed ? 3000 : 500)\r\n    }\r\n\r\n}","import { useRef, useEffect } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    let id = setInterval(tick, delay);\r\n    return () => clearInterval(id);\r\n  }, [delay]);\r\n}\r\n\r\nexport function useOnceCall(cb, condition = true) {\r\n  const isCalledRef = useRef(false);\r\n  useEffect(() => {\r\n    if (condition && !isCalledRef.current) {\r\n      isCalledRef.current = true;\r\n      cb();\r\n    }\r\n  }, [cb, condition]);\r\n}\r\n","import {\r\n  Button,\r\n  Popover,\r\n  Card,\r\n  Form,\r\n  Input,\r\n  Select,\r\n  List,\r\n  Row,\r\n  Col,\r\n  message,\r\n  InputNumber,\r\n  Space,\r\n  Modal,\r\n} from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  LockOutlined,\r\n  MinusOutlined,\r\n  PlusOutlined,\r\n  LeftOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { useState, useEffect } from \"react\";\r\nimport * as QRCode from \"qrcode.react\";\r\nimport { mvc } from \"mvc-scrypt\";\r\nimport {\r\n  getWocAddressUrl,\r\n  formatValue,\r\n  isValidAddress,\r\n  transferBsv,\r\n  transferSensibleFt,\r\n  getWocTransactionUrl,\r\n  getSensibleFtHistoryUrl,\r\n  parseTransaction,\r\n  broadcastSensibleQeury,\r\n} from \"./lib\";\r\nimport * as createPostMsg from \"post-msg\";\r\nimport { useGlobalState } from \"./state/state\";\r\nimport * as actions from \"./state/action\";\r\nimport { useOnceCall } from \"./hooks\";\r\nimport \"./App.css\";\r\nimport * as util from \"./lib/util\";\r\nimport * as Sentry from \"@sentry/react\";\r\nimport axios from \"axios\";\r\n\r\n//const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\nconst { Option } = Select;\r\n\r\nfunction Header() {\r\n  const [account] = useGlobalState(\"account\");\r\n  const [key] = useGlobalState(\"key\");\r\n  const [decodeModalVisible, setDecodeModalVisible] = useState(false);\r\n  const [rawtx, setRawtx] = useState(\"\");\r\n  const [network, setNetwork] = useState(\"\");\r\n  const [resultModalVisible, setResultModalVisible] = useState(false);\r\n\r\n  const handleLogout = () => {\r\n    actions.saveAccount(null);\r\n  };\r\n  const handleHistory = () => {\r\n    let url = getWocAddressUrl(account.network, key.address);\r\n    window.open(url);\r\n  };\r\n  const handleSourceCode = () => {\r\n    window.open(\"http://github.com\");\r\n  };\r\n\r\n  const decodeTx = () => {\r\n    const res = parseTransaction(network, rawtx);\r\n    console.log(\"decodeTx res\", res);\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"logo\">Web Wallet</div>\r\n      {account && (\r\n        <Popover\r\n          title=\"\"\r\n          content={\r\n            <>\r\n              <Button type=\"link\" onClick={handleLogout}>\r\n                Logout\r\n              </Button>\r\n              <br />\r\n              <Button type=\"link\" onClick={handleHistory}>\r\n                History\r\n              </Button>\r\n              <br />\r\n              <Button type=\"link\" onClick={handleSourceCode}>\r\n                Source Code\r\n              </Button>\r\n              <br />\r\n              <Button type=\"link\" onClick={() => setDecodeModalVisible(true)}>\r\n                decode rawtx\r\n              </Button>\r\n            </>\r\n          }\r\n        >\r\n          <Button type=\"link\">{account.email}</Button>\r\n        </Popover>\r\n      )}\r\n      <Modal\r\n        visible={decodeModalVisible}\r\n        onCancel={() => setDecodeModalVisible(false)}\r\n      >\r\n        <Input.TextArea\r\n          rows={4}\r\n          value={rawtx}\r\n          onChange={(e) => setRawtx(e.target.value)}\r\n        ></Input.TextArea>\r\n        <Select\r\n          style={{ width: 180 }}\r\n          placeholder=\"Select network\"\r\n          value={network}\r\n          onChange={(value) => setNetwork(value)}\r\n        >\r\n          <Option value=\"mainnet\">mainnet</Option>\r\n          <Option value=\"testnet\">testnet</Option>\r\n        </Select>\r\n        <Button type=\"primary\" onClick={decodeTx}>\r\n          decode\r\n        </Button>\r\n      </Modal>\r\n      <Modal\r\n        visible={resultModalVisible}\r\n        onCancel={() => setResultModalVisible(false)}\r\n      ></Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LoginPanel() {\r\n  const [account] = useGlobalState(\"account\");\r\n  const [form] = Form.useForm();\r\n\r\n  const handleOnFinish = () => {\r\n    Modal.confirm({\r\n      title: \"安全注意\",\r\n      content: (\r\n        <div>\r\n          Web钱包的私钥是通过用户的邮箱和密码实时计算得到，不会上传服务器，也不会保存在本地(代码见\r\n          <a\r\n            href=\"https://github.com/klouskingsley/mvc-web-wallet\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            github\r\n          </a>\r\n          )。仅供方便用户测试之用，不适合存放大量资金，建议用户妥善保管邮箱+密码组合以防资金丢失，或在使用完成之后将剩余资金转移。邮箱+密码组合丢失(忘记，被盗等情形)会导致资产丢失\r\n        </div>\r\n      ),\r\n      onOk: () => {\r\n        const account = form.getFieldsValue();\r\n        actions.saveAccount(account);\r\n      },\r\n    });\r\n  };\r\n  if (account) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card className=\"card\" title=\"Login\" bordered={false}>\r\n      <Form form={form} layout=\"vertical\" onFinish={handleOnFinish}>\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              type: \"email\",\r\n              required: true,\r\n              message: \"Please input a valid Email!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Email\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[\r\n            { required: true, message: \"Please input your Password!\" },\r\n            {\r\n              min: 6,\r\n              message: \"Password at least 6 chars\",\r\n              transform: (value) => value && value.trim(),\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            visibilityToggle={true}\r\n            placeholder=\"Password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item name=\"network\" label=\"Network\" rules={[{ required: true }]}>\r\n          <Select placeholder=\"Select network\">\r\n            <Option value=\"mainnet\">mainnet</Option>\r\n            <Option value=\"testnet\">testnet</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item>\r\n          说明：Web钱包的私钥是通过用户的邮箱和密码实时计算得到(无需注册)，每次输入相同的邮箱和密码登录即可计算出相同的私钥，私钥不会上传服务器，也不会保存在本地，仅供方便用户测试之用，不适合存放大量资金，建议用户妥善保管邮箱+密码组合以防资金丢失。\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n          >\r\n            Log in\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction AccountInfoPanel({ onWithDraw, onTransfer }) {\r\n  const [key] = useGlobalState(\"key\");\r\n  const [account] = useGlobalState(\"account\");\r\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\r\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\r\n\r\n  if (!key || !account) {\r\n    return null;\r\n  }\r\n  const handleHistory = () => {\r\n    let url = getWocAddressUrl(account.network, key.address);\r\n    window.open(url);\r\n  };\r\n  const handleTransfer = (genesis) => {\r\n    if (!genesis) {\r\n      return onTransfer(\"\");\r\n    }\r\n    // if (!satotxConfigMap.has(genesis)) {\r\n    //   return message.error(\"rabin api not set or found\");\r\n    // }\r\n    return onTransfer(genesis);\r\n  };\r\n  return [\r\n    <Card\r\n      className=\"card\"\r\n      title=\"Account Info\"\r\n      bordered={false}\r\n      actions={\r\n        <>\r\n          <Button type=\"link\" onClick={handleHistory}>\r\n            history\r\n          </Button>\r\n          ,\r\n          <Button type=\"link\" onClick={onWithDraw}>\r\n            withdraw\r\n          </Button>\r\n          ,\r\n        </>\r\n      }\r\n    >\r\n      <Form layout=\"vertical\">\r\n        <Form.Item label={`${account.network} address`}>\r\n          <Input value={key.address} />\r\n          <div style={{ margin: 20 }}>\r\n            <QRCode value={key.address} />\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item label=\"privateKey\">\r\n          <Input.Password visibilityToggle={true} value={key.privateKey} />\r\n        </Form.Item>\r\n      </Form>\r\n    </Card>,\r\n    <Card className=\"card\" title=\"Asset\" bordered={false}>\r\n      <Form layout=\"vertical\">\r\n        {bsvBalance && (\r\n          <Form.Item label=\"MVC balance\">\r\n            <Row justify=\"space-between\">\r\n              <Col span={16}>\r\n                <div>{formatValue(bsvBalance.balance, 8)}</div>\r\n              </Col>\r\n              <Col span={7}>\r\n                <Button type=\"link\" onClick={() => handleTransfer(\"\")}>\r\n                  Transfer MVC\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form.Item>\r\n        )}\r\n        {sensibleFtList.length > 0 && (\r\n          <Form.Item label=\"Fungible Token\">\r\n            <List\r\n              itemLayout=\"horizontal\"\r\n              dataSource={sensibleFtList}\r\n              renderItem={(item) => {\r\n                return (\r\n                  <List.Item\r\n                    key={item.genesis}\r\n                    actions={\r\n                      <>\r\n                        <Popover\r\n                          placement=\"topRight\"\r\n                          content={\r\n                            <>\r\n                              <div>codehash: {item.codehash}</div>,\r\n                              <div>genesis: {item.genesis}</div>,\r\n                            </>\r\n                          }\r\n                        >\r\n                          <a\r\n                            key=\"list-loadmore-more\"\r\n                            href={getSensibleFtHistoryUrl(\r\n                              account.network,\r\n                              key.address,\r\n                              item.genesis,\r\n                              item.codehash\r\n                            )}\r\n                            rel=\"noreferrer\"\r\n                            target=\"_blank\"\r\n                          >\r\n                            more info\r\n                          </a>\r\n                        </Popover>\r\n                      </>\r\n                    }\r\n                  >\r\n                    <List.Item.Meta\r\n                      title={item.tokenSymbol}\r\n                      description={item.tokenName}\r\n                    />\r\n                    <Row>\r\n                      <Col>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          Balance:{\" \"}\r\n                          {formatValue(item.balance, item.tokenDecimal)}\r\n                        </div>\r\n                      </Col>\r\n                      <Col>\r\n                        <Button\r\n                          type=\"link\"\r\n                          onClick={() => handleTransfer(item.genesis)}\r\n                        >\r\n                          Go Transfer\r\n                        </Button>\r\n                      </Col>\r\n                    </Row>\r\n                  </List.Item>\r\n                );\r\n              }}\r\n            ></List>\r\n          </Form.Item>\r\n        )}\r\n      </Form>\r\n    </Card>,\r\n  ];\r\n}\r\n\r\nfunction getRabinPubKeys(url) {\r\n  return axios.get(url);\r\n}\r\n\r\nasync function getRabins(rabinApis = []) {\r\n  let promises = [],\r\n    rabins = [];\r\n  rabinApis.forEach((rabinApi) => {\r\n    promises.push(getRabinPubKeys(rabinApi));\r\n  });\r\n  return new Promise((resolve) => {\r\n    axios.all(promises).then((res) => {\r\n      // console.log(res);\r\n      res.forEach((item, index) => {\r\n        rabins.push({\r\n          satotxApiPrefix: rabinApis[index],\r\n          satotxPubKey: item.data.data.pubKey,\r\n        });\r\n      });\r\n\r\n      resolve(rabins);\r\n    });\r\n  });\r\n}\r\n\r\nfunction TransferAllPanel({ initDatas = [], onCancel, onTransferCallback }) {\r\n  const [key] = useGlobalState(\"key\");\r\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\r\n  const [account] = useGlobalState(\"account\");\r\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useOnceCall(() => {\r\n    const values = {};\r\n    initDatas.forEach((data, index) => {\r\n      const isBsv = !data.genesis;\r\n      const token = sensibleFtList.find(\r\n        (item) => item.genesis === data.genesis\r\n      );\r\n      const decimal = isBsv ? 8 : token.tokenDecimal;\r\n      values[`receiverList${index}`] = data.receivers.map((item) => {\r\n        return {\r\n          address: item.address,\r\n          amount: util.div(item.amount, util.getDecimalString(decimal)),\r\n        };\r\n      });\r\n    });\r\n    form.setFieldsValue(values);\r\n  }, key && bsvBalance);\r\n\r\n  if (!key) {\r\n    return null;\r\n  }\r\n  if (!bsvBalance) {\r\n    return null;\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const receiverLists = form.getFieldsValue();\r\n\r\n    const broadcastBsv = async ({ formatReceiverList, noBroadcast }) => {\r\n      setLoading(true);\r\n      let transferRes;\r\n      let txid = \"\";\r\n      try {\r\n        if (noBroadcast === true) {\r\n          const allUtxos = true;\r\n          const tx = await await transferBsv(\r\n            account.network,\r\n            key.privateKey,\r\n            formatReceiverList,\r\n            noBroadcast,\r\n            allUtxos\r\n          );\r\n          return tx;\r\n        }\r\n        const res = await await transferBsv(\r\n          account.network,\r\n          key.privateKey,\r\n          formatReceiverList\r\n        );\r\n        transferRes = res;\r\n        txid = res.txid;\r\n      } catch (err) {\r\n        const msg = \"broadcast error: \" + err.toString();\r\n        Sentry.captureException(err);\r\n        Sentry.captureMessage(`bsvTransferFail_${key.address}`);\r\n        onTransferCallback({\r\n          error: msg,\r\n        });\r\n        console.log(\"broadcast mvc error \");\r\n        console.error(err);\r\n        message.error(err.toString());\r\n      }\r\n      Sentry.captureMessage(`bsvTransferSuccess_${key.address}_${txid}`);\r\n      return transferRes;\r\n    };\r\n\r\n    const broadcastSensibleFt = async ({\r\n      formatReceiverList,\r\n      token,\r\n      decimal,\r\n      genesis,\r\n      rabinApis,\r\n      utxos,\r\n      noBroadcast,\r\n    }) => {\r\n      setLoading(true);\r\n      let transferRes;\r\n      try {\r\n        const rabins = await getRabins(rabinApis);\r\n        const res = await transferSensibleFt(\r\n          account.network,\r\n          // signers,\r\n          rabins,\r\n          key.privateKey,\r\n          formatReceiverList,\r\n          token.codehash,\r\n          token.genesis,\r\n          utxos,\r\n          noBroadcast || false\r\n        );\r\n        transferRes = res;\r\n      } catch (err) {\r\n        Sentry.captureException(err);\r\n        Sentry.captureMessage(\r\n          `ftTransferFail_${key.address}_${token.genesis}_${token.genesis}`\r\n        );\r\n        onTransferCallback({\r\n          error: \"broadcast sensible ft error, \" + err.toString(),\r\n        });\r\n        console.log(\"broadcast sensible ft error \");\r\n        console.error(err);\r\n        message.error(err.toString());\r\n      }\r\n      return transferRes;\r\n    };\r\n\r\n    const broadcastBsvAndToken = async () => {\r\n      const txs = [];\r\n      const transferRes = [];\r\n      let utxos = [];\r\n      // mvc transaction must be the first one\r\n      for (let i = 0; i < initDatas.length; i++) {\r\n        const data = initDatas[i];\r\n        const isBsv = !data.genesis;\r\n        const token = sensibleFtList.find(\r\n          (item) => item.genesis === data.genesis\r\n        );\r\n        const decimal = isBsv ? 8 : token.tokenDecimal;\r\n        const balance = isBsv ? bsvBalance.balance : token.balance;\r\n        const rabinApis = data.rabinApis;\r\n        const totalOutputValueFloatDuck = receiverLists[\r\n          `receiverList${i}`\r\n        ].reduce((prev, cur) => util.plus(prev, cur.amount), 0);\r\n\r\n        const totalOutputValue = util.multi(\r\n          totalOutputValueFloatDuck,\r\n          util.getDecimalString(decimal)\r\n        );\r\n        if (util.lessThan(balance, totalOutputValue)) {\r\n          const msg = \"Insufficient ft balance\";\r\n          onTransferCallback({\r\n            error: msg,\r\n          });\r\n          return message.error(msg);\r\n        }\r\n        const formatReceiverList = data.receivers.map((item) => {\r\n          return {\r\n            address: item.address,\r\n            // amount: util.multi(item.amount, util.getDecimalString(decimal)),\r\n            amount: item.amount,\r\n          };\r\n        });\r\n        if (isBsv) {\r\n          const tx = await broadcastBsv({\r\n            formatReceiverList,\r\n            noBroadcast: true,\r\n          });\r\n          const outputIndex = tx.outputs.length - 1;\r\n          //TODO: check res outputs\r\n          if (outputIndex !== 1) {\r\n            const msg = \"Insufficient ft balance\";\r\n            onTransferCallback({\r\n              error: msg,\r\n            });\r\n            return message.error(msg);\r\n          }\r\n          const output = tx.outputs[outputIndex];\r\n          txs.push({\r\n            tx: tx,\r\n            isBsv: true,\r\n            noBroadcast: !!data.noBroadcast,\r\n          });\r\n          utxos = [];\r\n          utxos.push({\r\n            txId: tx.id,\r\n            outputIndex,\r\n            satoshis: output.satoshis,\r\n            wif: key.privateKey,\r\n            address: new mvc.PrivateKey(\r\n              key.privateKey,\r\n              account.network\r\n            ).toAddress(account.network),\r\n          });\r\n        } else {\r\n          const { routeCheckTx, tx } = await broadcastSensibleFt({\r\n            formatReceiverList,\r\n            token,\r\n            decimal,\r\n            genesis: data.genesis,\r\n            rabinApis,\r\n            utxos,\r\n            noBroadcast: true,\r\n          });\r\n          txs.push({\r\n            tx,\r\n            routeCheckTx,\r\n            isBsv: false,\r\n            noBroadcast: !!data.noBroadcast,\r\n          });\r\n          const outputIndex = tx.outputs.length - 1;\r\n          const output = tx.outputs[outputIndex];\r\n          utxos = [];\r\n          utxos.push({\r\n            txId: tx.id,\r\n            outputIndex,\r\n            satoshis: output.satoshis,\r\n            wif: key.privateKey,\r\n            address: new mvc.PrivateKey(\r\n              key.privateKey,\r\n              account.network\r\n            ).toAddress(account.network),\r\n          });\r\n        }\r\n      }\r\n\r\n      for (const txInfo of txs) {\r\n        if (!txInfo.noBroadcast) {\r\n          if (txInfo.routeCheckTx) {\r\n            await broadcastSensibleQeury(\r\n              account.network,\r\n              txInfo.routeCheckTx.serialize(true)\r\n            );\r\n          }\r\n          if (txInfo.tx) {\r\n            await broadcastSensibleQeury(\r\n              account.network,\r\n              txInfo.tx.serialize(true)\r\n            );\r\n          }\r\n        }\r\n\r\n        var resItem = {\r\n          txid: txInfo.tx.hash,\r\n          outputs: parseTransaction(account.network, txInfo.tx.serialize(true))\r\n            .outputs,\r\n          fee: txInfo.tx.getFee(),\r\n          isBsv: txInfo.isBsv,\r\n          txHex: txInfo.tx.serialize(true),\r\n        };\r\n        if (!resItem.isBsv) {\r\n          resItem.routeCheckTxid = txInfo.routeCheckTx.hash;\r\n          resItem.routeCheckTxHex = txInfo.routeCheckTx.serialize(true);\r\n          resItem.routeCheckOutputs = parseTransaction(\r\n            account.network,\r\n            txInfo.routeCheckTx.serialize(true)\r\n          ).outputs;\r\n        }\r\n\r\n        transferRes.push(resItem);\r\n      }\r\n\r\n      setLoading(false);\r\n      onTransferCallback({\r\n        response: {\r\n          ...transferRes,\r\n        },\r\n      });\r\n    };\r\n\r\n    const buildBsvAndTokenTx = async () => {\r\n      const txs = {};\r\n      let utxos = [];\r\n      // mvc transaction must be the first one\r\n      for (let i = 0; i < initDatas.length; i++) {\r\n        const data = initDatas[i];\r\n        const isBsv = !data.genesis;\r\n        const token = sensibleFtList.find(\r\n          (item) => item.genesis === data.genesis\r\n        );\r\n        const decimal = isBsv ? 8 : token.tokenDecimal;\r\n        const balance = isBsv ? bsvBalance.balance : token.balance;\r\n        const rabinApis = data.rabinApis;\r\n        const totalOutputValueFloatDuck = receiverLists[\r\n          `receiverList${i}`\r\n        ].reduce((prev, cur) => util.plus(prev, cur.amount), 0);\r\n\r\n        const totalOutputValue = util.multi(\r\n          totalOutputValueFloatDuck,\r\n          util.getDecimalString(decimal)\r\n        );\r\n        if (util.lessThan(balance, totalOutputValue)) {\r\n          const msg = \"Insufficient ft balance\";\r\n          onTransferCallback({\r\n            error: msg,\r\n          });\r\n          return message.error(msg);\r\n        }\r\n        const formatReceiverList = data.receivers.map((item) => {\r\n          return {\r\n            address: item.address,\r\n            // amount: util.multi(item.amount, util.getDecimalString(decimal)),\r\n            amount: item.amount,\r\n          };\r\n        });\r\n        if (isBsv) {\r\n          const tx = await broadcastBsv({\r\n            formatReceiverList,\r\n            noBroadcast: true,\r\n          });\r\n          const outputIndex = tx.outputs.length - 1;\r\n          //TODO: check res outputs\r\n          if (outputIndex !== 1) {\r\n            const msg = \"Insufficient ft balance\";\r\n            onTransferCallback({\r\n              error: msg,\r\n            });\r\n            return message.error(msg);\r\n          }\r\n          const output = tx.outputs[outputIndex];\r\n          txs.bsvRawTx = tx.toString();\r\n          utxos = [];\r\n          utxos.push({\r\n            txId: tx.id,\r\n            outputIndex,\r\n            satoshis: output.satoshis,\r\n            wif: key.privateKey,\r\n            address: new mvc.PrivateKey(\r\n              key.privateKey,\r\n              account.network\r\n            ).toAddress(account.network),\r\n          });\r\n        } else {\r\n          const { amountCheckTx, tx } = await broadcastSensibleFt({\r\n            formatReceiverList,\r\n            token,\r\n            decimal,\r\n            genesis: data.genesis,\r\n            rabinApis,\r\n            utxos,\r\n            noBroadcast: true,\r\n          });\r\n          txs.amountCheckRawTx = amountCheckTx.toString();\r\n          txs.tokenRawTx = tx.toString();\r\n          const outputIndex = tx.outputs.length - 1;\r\n          const output = tx.outputs[outputIndex];\r\n          utxos = [];\r\n          utxos.push({\r\n            txId: tx.id,\r\n            outputIndex,\r\n            satoshis: output.satoshis,\r\n            wif: key.privateKey,\r\n            address: new mvc.PrivateKey(\r\n              key.privateKey,\r\n              account.network\r\n            ).toAddress(account.network),\r\n          });\r\n        }\r\n      }\r\n\r\n      setLoading(false);\r\n      onTransferCallback({\r\n        response: txs,\r\n      });\r\n    };\r\n\r\n    Modal.confirm({\r\n      title: \"Confirm the transaction\",\r\n      onOk: () => {\r\n        //broadcastAll();\r\n        broadcastBsvAndToken();\r\n      },\r\n    });\r\n  };\r\n  const handleBack = () => {\r\n    onCancel();\r\n  };\r\n  return (\r\n    <Card\r\n      className=\"card\"\r\n      title={\r\n        <div style={{ cursor: \"pointer\" }} onClick={handleBack}>\r\n          <LeftOutlined />\r\n          Transfer\r\n        </div>\r\n      }\r\n      loading={loading}\r\n      bordered={false}\r\n    >\r\n      <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\r\n        {initDatas.map((data, index) => {\r\n          const isBsv = !data.genesis;\r\n          const token = sensibleFtList.find(\r\n            (item) => item.genesis === data.genesis\r\n          );\r\n\r\n          if (!isBsv && !token) {\r\n            return null;\r\n          }\r\n          const tokenSymbol = isBsv ? \"MVC\" : token.tokenSymbol;\r\n          const decimal = isBsv ? 8 : token.tokenDecimal;\r\n          const balance = isBsv ? bsvBalance.balance : token.balance;\r\n          const formatBalance = formatValue(balance, decimal);\r\n          const canEdit = !(data.receivers.length > 0);\r\n          return (\r\n            <div key={index}>\r\n              <div className=\"transfer-line\">\r\n                {isBsv ? `Coin: ${tokenSymbol}` : `Token: ${tokenSymbol}`}\r\n              </div>\r\n              {!isBsv && (\r\n                <div className=\"transfer-line\">Genesis: {token.genesis}</div>\r\n              )}\r\n              {!isBsv && (\r\n                <div className=\"transfer-line\">Codehash: {token.codehash}</div>\r\n              )}\r\n              <Row justify=\"space-between\" style={{ margin: \"10px 0\" }}>\r\n                <Col span={14}>\r\n                  <div style={{ fontWeight: 700 }}>Input</div>\r\n                </Col>\r\n              </Row>\r\n              <div className=\"transfer-line\">{`Balance: ${formatBalance}`}</div>\r\n              <div className=\"transfer-line\">{`From Address: ${key.address}`}</div>\r\n              <Row justify=\"space-between\" style={{ margin: \"10px 0\" }}>\r\n                <Col span={14}>\r\n                  <div style={{ fontWeight: 700 }}>Output</div>\r\n                </Col>\r\n              </Row>\r\n              <Form.List name={`receiverList${index}`}>\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map((key, name, fieldKey, ...restField) => {\r\n                      return (\r\n                        <Space\r\n                          key={key.fieldKey}\r\n                          style={{ display: \"flex\", marginBottom: 8 }}\r\n                          align=\"baseline\"\r\n                        >\r\n                          <Form.Item\r\n                            {...restField}\r\n                            name={[name, \"address\"]}\r\n                            fieldKey={[fieldKey, \"address\"]}\r\n                            rules={[\r\n                              {\r\n                                required: true,\r\n                                message: \"Please input the address\",\r\n                              },\r\n                              {\r\n                                message: \"invalid address\",\r\n                                validator: (_, value) =>\r\n                                  isValidAddress(account.network, value)\r\n                                    ? Promise.resolve()\r\n                                    : Promise.reject(),\r\n                              },\r\n                            ]}\r\n                          >\r\n                            <Input\r\n                              placeholder=\"Input the address\"\r\n                              disabled={!canEdit}\r\n                            />\r\n                          </Form.Item>\r\n                          <Form.Item\r\n                            {...restField}\r\n                            name={[name, \"amount\"]}\r\n                            fieldKey={[fieldKey, \"amount\"]}\r\n                            rules={[\r\n                              {\r\n                                required: true,\r\n                                message: \"Please input amount\",\r\n                              },\r\n                            ]}\r\n                          >\r\n                            <InputNumber\r\n                              placeholder=\"Amount\"\r\n                              min={0}\r\n                              disabled={!canEdit}\r\n                            />\r\n                          </Form.Item>\r\n                          <Button\r\n                            disabled={!canEdit}\r\n                            size=\"small\"\r\n                            onClick={() => remove(name)}\r\n                            shape=\"circle\"\r\n                            icon={<MinusOutlined />}\r\n                          />\r\n                        </Space>\r\n                      );\r\n                    })}\r\n\r\n                    <Form.Item>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        icon={<PlusOutlined />}\r\n                        disabled={!canEdit}\r\n                      >\r\n                        Add Output\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </div>\r\n          );\r\n        })}\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" block>\r\n            Transfer\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction TransferPanel({\r\n  genesis = \"\",\r\n  initReceivers = [],\r\n  rabinApis = [],\r\n  onCancel,\r\n  onTransferCallback,\r\n  noBroadcast,\r\n}) {\r\n  const [key] = useGlobalState(\"key\");\r\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\r\n  const [account] = useGlobalState(\"account\");\r\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const canEdit = !(initReceivers.length > 0);\r\n\r\n  useOnceCall(() => {\r\n    const isBsv = genesis === \"\";\r\n    const token = sensibleFtList.find((item) => item.genesis === genesis);\r\n    const decimal = isBsv ? 8 : token.tokenDecimal;\r\n    console.log(\r\n      \"initReceivers\",\r\n      initReceivers,\r\n      initReceivers.map((item) => {\r\n        return {\r\n          address: item.address,\r\n          amount: util.multi(item.amount, util.getDecimalString(decimal)),\r\n        };\r\n      })\r\n    );\r\n    form.setFieldsValue({\r\n      receiverList: initReceivers.map((item) => {\r\n        return {\r\n          address: item.address,\r\n          amount: util.div(item.amount, util.getDecimalString(decimal)),\r\n        };\r\n      }),\r\n    });\r\n  }, key && bsvBalance && initReceivers.length);\r\n\r\n  if (!key) {\r\n    return null;\r\n  }\r\n  if (!bsvBalance) {\r\n    return null;\r\n  }\r\n  if (genesis && !sensibleFtList.length) {\r\n    return null;\r\n  }\r\n\r\n  const isBsv = genesis === \"\";\r\n  const token = sensibleFtList.find((item) => item.genesis === genesis);\r\n\r\n  if (!isBsv && !token) {\r\n    return null;\r\n  }\r\n  const tokenSymbol = isBsv ? \"MVC\" : token.tokenSymbol;\r\n  const decimal = isBsv ? 8 : token.tokenDecimal;\r\n  const balance = isBsv ? bsvBalance.balance : token.balance;\r\n  const formatBalance = formatValue(balance, decimal);\r\n\r\n  const handleSubmit = async () => {\r\n    const { receiverList } = form.getFieldsValue();\r\n    const totalOutputValueFloatDuck = receiverList.reduce(\r\n      (prev, cur) => util.plus(prev, cur.amount),\r\n      0\r\n    );\r\n\r\n    const totalOutputValue = util.multi(\r\n      totalOutputValueFloatDuck,\r\n      util.getDecimalString(decimal)\r\n    );\r\n    if (util.lessThan(balance, totalOutputValue)) {\r\n      const msg = \"Insufficient ft balance\";\r\n      onTransferCallback({\r\n        error: msg,\r\n      });\r\n      return message.error(msg);\r\n    }\r\n    const formatReceiverList = receiverList.map((item) => {\r\n      return {\r\n        address: item.address,\r\n        amount: util.multi(item.amount, util.getDecimalString(decimal)),\r\n      };\r\n    });\r\n\r\n    const broadcastBsv = async () => {\r\n      setLoading(true);\r\n      let txid = \"\";\r\n      let transferRes;\r\n      try {\r\n        const res = await transferBsv(\r\n          account.network,\r\n          key.privateKey,\r\n          formatReceiverList,\r\n          noBroadcast\r\n        );\r\n        if (noBroadcast) {\r\n          transferRes = {\r\n            txid: res.hash,\r\n            txHex: res.serialize(true),\r\n            outputs: parseTransaction(account.network, res.serialize(true))\r\n              .outputs,\r\n            fee: res.getFee(),\r\n          };\r\n          txid = res.hash;\r\n        } else {\r\n          transferRes = res;\r\n          txid = res.txid;\r\n        }\r\n      } catch (err) {\r\n        const msg = \"broadcast error: \" + err.toString();\r\n        console.log(\r\n          util.safeJsonStringify({\r\n            type: \"bsvTransferFail\",\r\n            msg,\r\n            account: {\r\n              network: account.network,\r\n              address: key.address,\r\n            },\r\n            receivers: formatReceiverList,\r\n          })\r\n        );\r\n        Sentry.captureException(err);\r\n        Sentry.captureMessage(`bsvTransferFail_${key.address}`);\r\n        onTransferCallback({\r\n          error: msg,\r\n        });\r\n        console.log(\"broadcast mvc error \");\r\n        console.error(err);\r\n        message.error(err.toString());\r\n      }\r\n      setLoading(false);\r\n      if (txid) {\r\n        console.log(\r\n          util.safeJsonStringify({\r\n            type: \"bsvTransferSuccess\",\r\n            account: {\r\n              network: account.network,\r\n              address: key.address,\r\n            },\r\n            receivers: formatReceiverList,\r\n            txid,\r\n            ...transferRes,\r\n          })\r\n        );\r\n        Sentry.captureMessage(`bsvTransferSuccess_${key.address}_${txid}`);\r\n        onTransferCallback({\r\n          response: {\r\n            ...transferRes,\r\n          },\r\n        });\r\n        Modal.success({\r\n          title: \"Transaction broadcast success\",\r\n          content: (\r\n            <div>\r\n              txid:{\" \"}\r\n              <a\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                href={getWocTransactionUrl(account.network, txid)}\r\n              >\r\n                {txid}\r\n              </a>\r\n            </div>\r\n          ),\r\n        });\r\n      }\r\n    };\r\n\r\n    const broadcastSensibleFt = async () => {\r\n      setLoading(true);\r\n      let txid = \"\";\r\n      let transferRes;\r\n      try {\r\n        const rabins = await getRabins(rabinApis);\r\n\r\n        const res = await transferSensibleFt(\r\n          account.network,\r\n          // signers,\r\n          rabins,\r\n          key.privateKey,\r\n          formatReceiverList,\r\n          token.codehash,\r\n          token.genesis,\r\n          false,\r\n          noBroadcast\r\n        );\r\n        if (noBroadcast) {\r\n          transferRes = {\r\n            txid: res.tx.hash,\r\n            outputs: parseTransaction(account.network, res.tx.serialize(true))\r\n              .outputs,\r\n            fee: res.tx.getFee(),\r\n            routeCheckTxid: res.routeCheckTx.hash,\r\n            txHex: res.tx.serialize(true),\r\n            routeCheckTxHex: res.routeCheckTx.serialize(true),\r\n            routeCheckOutputs: parseTransaction(\r\n              account.network,\r\n              res.routeCheckTx.serialize(true)\r\n            ).outputs,\r\n          };\r\n          txid = res.tx.hash;\r\n        } else {\r\n          transferRes = res;\r\n          txid = res.txid;\r\n        }\r\n      } catch (err) {\r\n        console.log(\"broadcast sensible ft error \");\r\n        console.error(err);\r\n        message.error(err.toString());\r\n        console.log(\r\n          util.safeJsonStringify({\r\n            type: \"ftTransferFail\",\r\n            msg: util.safeJsonStringify(err.message),\r\n            account: {\r\n              network: account.network,\r\n              address: key.address,\r\n            },\r\n            genesis: token.genesis,\r\n            codehash: token.codehash,\r\n            receivers: formatReceiverList,\r\n          })\r\n        );\r\n        Sentry.captureException(err);\r\n        Sentry.captureMessage(\r\n          `ftTransferFail_${key.address}_${token.genesis}_${token.genesis}`\r\n        );\r\n        onTransferCallback({\r\n          error: err.toString(),\r\n        });\r\n      }\r\n      setLoading(false);\r\n      if (txid) {\r\n        console.log(\r\n          util.safeJsonStringify({\r\n            type: \"ftTransferSuccess,\",\r\n            account: {\r\n              network: account.network,\r\n              address: key.address,\r\n              genesis: token.genesis,\r\n              codehash: token.codehash,\r\n            },\r\n            receivers: formatReceiverList,\r\n            txid,\r\n            ...transferRes,\r\n          })\r\n        );\r\n        Sentry.captureMessage(`ftTransferSuccess_${key.address}_${txid}`);\r\n        onTransferCallback({\r\n          response: {\r\n            ...transferRes,\r\n          },\r\n        });\r\n        Modal.success({\r\n          title: \"Transaction broadcast success\",\r\n          content: (\r\n            <div>\r\n              txid:{\" \"}\r\n              <a\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                href={getWocTransactionUrl(account.network, txid)}\r\n              >\r\n                {txid}\r\n              </a>\r\n            </div>\r\n          ),\r\n        });\r\n      }\r\n    };\r\n\r\n    Modal.confirm({\r\n      title: \"Confirm the transaction\",\r\n      onOk: () => {\r\n        isBsv ? broadcastBsv() : broadcastSensibleFt();\r\n      },\r\n    });\r\n  };\r\n  const handleBack = () => {\r\n    onCancel();\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className=\"card\"\r\n      title={\r\n        <div style={{ cursor: \"pointer\" }} onClick={handleBack}>\r\n          <LeftOutlined />\r\n          Transfer\r\n        </div>\r\n      }\r\n      loading={loading}\r\n      bordered={false}\r\n    >\r\n      <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\r\n        <div className=\"transfer-line\">\r\n          {isBsv ? `Coin: ${tokenSymbol}` : `Token: ${tokenSymbol}`}\r\n        </div>\r\n        {!isBsv && (\r\n          <div className=\"transfer-line\">Genesis: {token.genesis}</div>\r\n        )}\r\n        {!isBsv && (\r\n          <div className=\"transfer-line\">Codehash: {token.codehash}</div>\r\n        )}\r\n        <Row justify=\"space-between\" style={{ margin: \"10px 0\" }}>\r\n          <Col span={14}>\r\n            <div style={{ fontWeight: 700 }}>Input</div>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"transfer-line\">{`Balance: ${formatBalance}`}</div>\r\n        <div className=\"transfer-line\">{`From Address: ${key.address}`}</div>\r\n        <Row justify=\"space-between\" style={{ margin: \"10px 0\" }}>\r\n          <Col span={14}>\r\n            <div style={{ fontWeight: 700 }}>Output</div>\r\n          </Col>\r\n        </Row>\r\n        <Form.List name=\"receiverList\">\r\n          {(fields, { add, remove }) => (\r\n            <>\r\n              {fields.map((key, name, fieldKey, ...restField) => {\r\n                return (\r\n                  <Space\r\n                    key={key.fieldKey}\r\n                    style={{ display: \"flex\", marginBottom: 8 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, \"address\"]}\r\n                      fieldKey={[fieldKey, \"address\"]}\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please input the address\",\r\n                        },\r\n                        {\r\n                          message: \"invalid address\",\r\n                          validator: (_, value) =>\r\n                            isValidAddress(account.network, value)\r\n                              ? Promise.resolve()\r\n                              : Promise.reject(),\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Input\r\n                        placeholder=\"Input the address\"\r\n                        disabled={!canEdit}\r\n                      />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, \"amount\"]}\r\n                      fieldKey={[fieldKey, \"amount\"]}\r\n                      rules={[\r\n                        { required: true, message: \"Please input amount\" },\r\n                      ]}\r\n                    >\r\n                      <InputNumber\r\n                        placeholder=\"Amount\"\r\n                        min={0}\r\n                        disabled={!canEdit}\r\n                      />\r\n                    </Form.Item>\r\n                    <Button\r\n                      disabled={!canEdit}\r\n                      size=\"small\"\r\n                      onClick={() => remove(name)}\r\n                      shape=\"circle\"\r\n                      icon={<MinusOutlined />}\r\n                    />\r\n                  </Space>\r\n                );\r\n              })}\r\n\r\n              <Form.Item>\r\n                <Button\r\n                  type=\"dashed\"\r\n                  onClick={() => add()}\r\n                  icon={<PlusOutlined />}\r\n                  disabled={!canEdit}\r\n                >\r\n                  Add Output\r\n                </Button>\r\n              </Form.Item>\r\n            </>\r\n          )}\r\n        </Form.List>\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" block>\r\n            Transfer\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    actions.recoverAccountFromStorage();\r\n  }, []);\r\n\r\n  const [trasfering, setTransfering] = useState(false);\r\n  const [trasferSensibleFtGenesis, setTrasferSensibleFtGenesis] = useState(\"\");\r\n  const [account] = useGlobalState(\"account\");\r\n  const [key] = useGlobalState(\"key\");\r\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\r\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\r\n  const [initReceivers, setInitReceivers] = useState([]);\r\n  const [initDatas, setInitDatas] = useState([]);\r\n  const [initRabins, setRabins] = useState([]);\r\n  const [initNoBroadcast, setInitNoBroadcast] = useState(false);\r\n\r\n  const handleTransfer = (genesis) => {\r\n    setTransfering(true);\r\n    genesis && setTrasferSensibleFtGenesis(genesis);\r\n  };\r\n  const handleCancelTransfer = () => {\r\n    setTransfering(false);\r\n    setTrasferSensibleFtGenesis(\"\");\r\n  };\r\n\r\n  const getHashData = () => {\r\n    if (!window.opener) {\r\n      return null;\r\n    }\r\n    const hash = window.location.hash.substr(1);\r\n    try {\r\n      const data = JSON.parse(decodeURIComponent(hash));\r\n      if (data.type === \"popup\") {\r\n        if (typeof data.data === \"object\") {\r\n          return data;\r\n        }\r\n      }\r\n    } catch (err) {}\r\n    return null;\r\n  };\r\n  const handlePopResponseCallback = (resObj) => {\r\n    const data = getHashData();\r\n    if (!data) {\r\n      return;\r\n    }\r\n    const postMsg = createPostMsg(window.opener, \"*\");\r\n    postMsg.emit(data.id, {\r\n      type: \"response\",\r\n      data: {\r\n        ...data.data.data,\r\n        ...resObj,\r\n      },\r\n    });\r\n  };\r\n\r\n  // todo 数值计算 使用 bignumber\r\n  // todo 此处接收 postMessage 消息，处理登录,transfer\r\n  const requestAccountCondition = key?.address && account?.network;\r\n  const transferBsvCondition =\r\n    requestAccountCondition &&\r\n    bsvBalance &&\r\n    util.greaterThanEqual(bsvBalance.balance, 0);\r\n  useOnceCall(() => {\r\n    const data = getHashData();\r\n    if (!data || data.data.type !== \"request\") {\r\n      return;\r\n    }\r\n\r\n    const { method, params } = data.data.data;\r\n    if (method !== \"requestAccount\") {\r\n      return;\r\n    }\r\n    Modal.confirm({\r\n      title: \"Connect\",\r\n      content: (\r\n        <div>\r\n          Allow <b>{params.name}</b> to connect your web wallet\r\n        </div>\r\n      ),\r\n      onOk: () => {\r\n        handlePopResponseCallback({ response: true });\r\n      },\r\n      onCancel: () => {\r\n        handlePopResponseCallback({ error: \"user reject\" });\r\n      },\r\n    });\r\n  }, !!requestAccountCondition);\r\n  useOnceCall(() => {\r\n    const data = getHashData();\r\n    console.log(\"mvc hash data\", data);\r\n    if (!data || data.data.type !== \"request\") {\r\n      return;\r\n    }\r\n\r\n    const { method, params } = data.data.data;\r\n    if (method !== \"transferBsv\") {\r\n      return;\r\n    }\r\n    // balance check\r\n    const outputTotal = params.receivers.reduce(\r\n      (prev, cur) => util.plus(prev, cur.amount),\r\n      0\r\n    );\r\n    if (util.greaterThan(outputTotal, bsvBalance.balance)) {\r\n      handlePopResponseCallback({ error: \"insufficient mvc balance\" });\r\n      return;\r\n    }\r\n    setTransfering(true);\r\n    setInitReceivers(params.receivers);\r\n    setInitNoBroadcast(params.noBroadcast);\r\n  }, !!transferBsvCondition);\r\n  useOnceCall(() => {\r\n    const data = getHashData();\r\n    console.log(\"hashdata\", data);\r\n    if (!data || data.data.type !== \"request\") {\r\n      return;\r\n    }\r\n\r\n    const { method, params } = data.data.data;\r\n    if (method !== \"transferSensibleFt\") {\r\n      return;\r\n    }\r\n    // sensibleft balance check\r\n    const outputTotal = params.receivers.reduce(\r\n      (prev, cur) => util.plus(prev, cur.amount),\r\n      0\r\n    );\r\n    console.log(\"outputTotal\", outputTotal);\r\n    const ft = sensibleFtList.find((item) => item.genesis === params.genesis);\r\n    console.log(\"ft\", ft);\r\n    if (!ft) {\r\n      handlePopResponseCallback({ error: \"insufficient ft balance\" });\r\n      return;\r\n    }\r\n    if (util.greaterThan(outputTotal, ft.balance)) {\r\n      handlePopResponseCallback({ error: \"insufficient ft balance\" });\r\n      return;\r\n    }\r\n    setTransfering(true);\r\n    setTrasferSensibleFtGenesis(params.genesis);\r\n    setInitReceivers(params.receivers);\r\n    setRabins(params.rabinApis);\r\n    setInitNoBroadcast(params.noBroadcast);\r\n  }, !!transferBsvCondition);\r\n  useOnceCall(() => {\r\n    const data = getHashData();\r\n    console.log(\"mvc hash data\", data);\r\n    if (!data || data.data.type !== \"request\") {\r\n      return;\r\n    }\r\n\r\n    const { method, params } = data.data.data;\r\n    if (method !== \"transferAll\") {\r\n      return;\r\n    }\r\n    // balance check\r\n    params.datas.forEach((item) => {\r\n      // balance check\r\n      const isBsv = !item.genesis;\r\n      const ft = sensibleFtList.find((v) => v.genesis === item.genesis);\r\n\r\n      const outputTotal = item.receivers.reduce(\r\n        (prev, cur) => util.plus(prev, cur.amount),\r\n        0\r\n      );\r\n      if (isBsv && util.greaterThan(outputTotal, bsvBalance.balance)) {\r\n        handlePopResponseCallback({ error: \"insufficient mvc balance\" });\r\n        return;\r\n      }\r\n      if (ft && util.greaterThan(outputTotal, ft.balance)) {\r\n        handlePopResponseCallback({ error: \"insufficient ft balance\" });\r\n        return;\r\n      }\r\n      setTransfering(true);\r\n      setInitDatas(params.datas);\r\n    });\r\n  }, !!transferBsvCondition);\r\n  useEffect(() => {\r\n    const obu = window.onbeforeunload;\r\n    window.onbeforeunload = function (event) {\r\n      handlePopResponseCallback({ error: \"use closed\" });\r\n      return obu && obu(event);\r\n    };\r\n  });\r\n  return (\r\n    <div className=\"App\" style={{ overflow: \"hidden\" }}>\r\n      <Header accountName=\"harry\" />\r\n      <LoginPanel />\r\n      {!trasfering && <AccountInfoPanel onTransfer={handleTransfer} />}\r\n      {trasfering &&\r\n        (!initDatas || initDatas.length < 1 ? (\r\n          <TransferPanel\r\n            genesis={trasferSensibleFtGenesis}\r\n            rabinApis={initRabins}\r\n            onCancel={handleCancelTransfer}\r\n            onTransferCallback={handlePopResponseCallback}\r\n            initReceivers={initReceivers}\r\n            noBroadcast={initNoBroadcast}\r\n          />\r\n        ) : (\r\n          <TransferAllPanel\r\n            onCancel={handleCancelTransfer}\r\n            onTransferCallback={handlePopResponseCallback}\r\n            initDatas={initDatas}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport * as actions from \"./state/action\";\r\nimport * as Sentry from \"@sentry/react\";\r\nimport { Integrations } from \"@sentry/tracing\";\r\nimport { SensibleApi } from \"meta-contract\";\r\nimport { mvc } from \"mvc-scrypt\";\r\n\r\n(function () {\r\n  /*const originBroadcast = SensibleApi.prototype.broadcast;\r\n  SensibleApi.prototype.broadcast = async function (hex) {\r\n    const txid = new mvc.Transaction(hex).hash;\r\n    const txMsg = `txid: ${txid}; rawtx: ${hex}`;\r\n    console.log(\"meta-contract 广播\", txMsg);\r\n    try {\r\n      const res = await originBroadcast.call(this, hex);\r\n      return res;\r\n    } catch (err) {\r\n      console.log(\"meta-contract 广播错误\", txMsg);\r\n      const newError = new Error(\r\n        `${err.message} meta-contract 广播错误 ${txMsg}`\r\n      );\r\n      setTimeout(() => {\r\n        throw newError;\r\n      }, 0);\r\n      throw err;\r\n    }\r\n  };*/\r\n})();\r\n\r\nconst isIframe = window === window.top;\r\n\r\nSentry.init({\r\n  dsn: \"https://d223c2a1d1bf44b6a657051ac9a99b16@o877284.ingest.sentry.io/5827823\",\r\n  integrations: [new Integrations.BrowserTracing()],\r\n\r\n  // Set tracesSampleRate to 1.0 to capture 100%\r\n  // of transactions for performance monitoring.\r\n  // We recommend adjusting this value in production\r\n  tracesSampleRate: 1.0,\r\n});\r\n\r\nif (isIframe) {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n} else {\r\n  actions.runIframeTask();\r\n}\r\n\r\n// delete account when page/iframe exit\r\n(function () {\r\n  const obu = window.onbeforeunload;\r\n  window.onbeforeunload = function (event) {\r\n    const isPopup = !!window.opener;\r\n    if (!isPopup) {\r\n      actions.saveAccount(null);\r\n    }\r\n    return obu && obu(event);\r\n  };\r\n})();\r\n\r\n// alert(window === window.top);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}